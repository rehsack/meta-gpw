#!/bin/bash

die() {
    echo "$@" >&2
    exit 1
}

help() {
    test -n "$1" && echo "$@"
    cat <<EOH
$0 -b <BRANCH> -f <FALLBACK_BRANCH> -d <BUILDDIR> -t <BB_TARGETS> -t <BB_TARGETS>
    -r <RECIPE_FOR_VARIABLES> [-v] | -h | -u
	-b: specify branch to be build -- falls back to master when doesn't
	    exists for that repository
	-f: specify fallback branch when \`-b\` one doesn't exists for repository
	-d: specify full qualified path to build directory
	-t: specify targets (recipes) to be built by bitbake
	-r: specify recipe to be used to fetch variables (e.g. release version)
	-v: verbosity on
	-h: show help
	-u: show usage
EOH
    exit 0
}

usage() {
    test -n "$1" && echo "$@"
    cat <<EOH
$0 -b <BRANCH> -f <FALLBACK_BRANCH> -d <BUILDDIR> -t <BB_TARGETS> -t <BB_TARGETS>
    -r <RECIPE_FOR_VARIABLES> [-v] | -h | -u
EOH
    exit 0
}

bitbake_var() {
    set -e
    cd "${BUILDPATH}"
    bitbake -e ${VAR_RECIPE} 2>&1 | egrep "^($@)="
}

set -x

: ${VERBOSE:="0"}
: ${FALLBACK_BRANCH:="master"}
: ${VAR_RECIPE:="system-image"}
 
declare -a _BB_EXTRA_TARGETS

while getopts "huvVb:f:d:r:t:" o
do
	case "${o}" in
	b)
		BRANCH=${OPTARG}
		;;
	f)
		FALLBACK_BRANCH=${OPTARG}
		;;
	r)
		VAR_RECIPE=${OPTARG}
		;;
	d)
		BUILDPATH=${OPTARG}
		;;
	t)
		case "${OPTARG}" in
		[_a-zA-Z]*\ -*)
			_BB_EXTRA_TARGETS[${#_BB_EXTRA_TARGETS[*]}]="${OPTARG}"
			;;
		*)
			BB_TARGETS="${BB_TARGETS}${BB_SPC}${OPTARG}"
			BB_SPC=" "
			;;
		esac
		;;
	v)
		VERBOSE="1"
		;;
	h)
		help
		;;
	*)
		usage
		;;
	esac
done
shift $((OPTIND-1))

test -z "${BRANCH}" && help "Missing <BRANCH>"
test -z "${BUILDPATH}" && help "Missing <BUILDPATH>"

: ${RECIPE_DIR:="$(dirname $0)"}
while [ ! -d "${RECIPE_DIR}/conf" ];
do
    RECIPE_DIR="`dirname ${RECIPE_DIR}`"
done
test -z "${OEROOT}" && OEROOT=$(readlink -f ${RECIPE_DIR}/../poky)
. ${OEROOT}/scripts/oe-init-bashrc

: ${DISTRO_NAME:=${DISTRO_NAME:-"$(basename ${RECIPE_DIR} | sed -e 's,meta-,,')"}}
: ${DISTRO_VERSION_FILE:="conf/distro/${DISTRO_NAME}.conf"}
: ${DISTRO_VERSION_PATH:="${RECIPE_DIR}/${DISTRO_VERSION_FILE}"}

set -e

oe_builddir use $BUILDPATH

REPOS=$(oe_builddir repos)
for d in ${REPOS}
do
    cd $d
    git fetch --all
    git checkout $BRANCH || git checkout master
    git pull --rebase
done

# XXX good example why we shall rewrite it as soon as pkgsrc is up-to-date (Packager::Utils ^^)
BITBAKE_SETTINGS=`bitbake_var "PV|BSPDIR" | sed -e "s/PV/SYSIMG_VERSION/"`
eval $BITBAKE_SETTINGS

cd "${RECIPE_DIR}"
git log -n 1 | grep "bump.*${SYSIMG_VERSION}" && die "Image is up to date"

: ${MACHINES:="$(basename --multiple --suffix=.conf ${RECIPE_DIR}/conf/machine/*.conf)"}
echo $MACHINES

oe_builddir prune
cd "${BUILDPATH}"

for MACHINE in ${MACHINES}
do
	export MACHINE
	time bitbake ${BB_TARGETS}
	for _bbi in $(seq 0 $(expr ${#_BB_EXTRA_TARGETS[*]} - 1));
	do
		time bitbake ${_BB_EXTRA_TARGETS[$_bbi]}
	done
done

time AUTOBUILD_SUCCEEDED=1 deploybundles

# bump
PS=$(printf 'my @v = split(/\./, "%s"); $v[$#v]++; print join( ".", @v)\n' "${SYSIMG_VERSION}")
SYSIMG_BUMPED=$(perl -le "$PS")

for d in ${REPOS}
do
    cd "$d"
    git tag "${DISTRO_NAME}-${SYSIMG_VERSION}" && git push --tags || :
done

(cd "${RECIPE_DIR}" && sed -i -e "s/${SYSIMG_VERSION}/${SYSIMG_BUMPED}/" "${DISTRO_VERSION_FILE}")
(cd "${RECIPE_DIR}" && git commit -m "bump version after release to ${SYSIMG_BUMPED}" "${DISTRO_VERSION_FILE}" && git push)
